"""
Django settings for austbooks project.

Generated by 'django-admin startproject' using Django 4.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
import django
from django.utils.translation import gettext
from django.utils.translation import gettext_lazy
django.utils.translation.ugettext = gettext
django.utils.translation.ugettext_lazy = gettext_lazy
import os
from pathlib import Path
from datetime import timedelta

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = (
    Path(__file__).resolve().parent.parent
)

DEBUG = True


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# SECRET_KEY = "django-insecure-mzy1+&y037ps@qgl5l13hg!#!cop3e8f&bivslbq50c$^*06qt"
SECRET_KEY = "#Rz~X#&3+Q(rzeep-.30e~IC}sK73'pM5Fk'D0vt@r&vV}PN]8rbz.jf#DgZ^$w7&h"


# Application definition

INSTALLED_APPS = [
    # Use WhiteNoise's runserver implementation instead of the Django default, for dev-prod parity.
    "whitenoise.runserver_nostatic",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "graphene_django",
    "crispy_tailwind",
    "corsheaders",
    "adminpanel"
]


# As we are using another authentication method, we also need to bring in that authentication backend.
AUTHENTICATION_BACKENDS = [
    "graphql_jwt.backends.JSONWebTokenBackend",
    "django.contrib.auth.backends.ModelBackend",
]

# A MIDDLEWARE is a layer of code that sits between the user's request (like your food order) and the 
# application's response (the chef cooking your food). Middleware checks and modifies the request or 
# response as needed before passing it on to the next step.
# Following middlewares are intended to be applied globally to the Django application.
MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",#provides a set of security-related features to help 
    # protect your application from common web attacks. 
    "corsheaders.middleware.CorsMiddleware", #CORS is a security feature implemented in web browsers to 
    # prevent web pages from making requests to a different origin (domain, protocol, or port) than the 
    # one the web page was loaded from. This middleware checks if the request includes an Origin header, 
    # which is a header that indicates the origin of the request. It adds CORS headers to the response.
    "whitenoise.middleware.WhiteNoiseMiddleware",  # If you are dealing with any sort of static files, you 
    # will need whitenoise; a package that allows your Django app to serve its own static files.
    "django.contrib.sessions.middleware.SessionMiddleware",#enables session management for your application. 
    # Sessions are a way to store data that is specific to a particular user or browser session. It Creates,
    # Stores, Retrieves, Updates and deletes session data.
    "django.middleware.common.CommonMiddleware", #provides common functionality for Django applications, such 
    # as handling HTTP redirects, URL rewriting, and appending slashes to URLs. It also checks for and 
    # handles HTTP request methods that are not allowed by the application.
    "django.middleware.csrf.CsrfViewMiddleware", #protects Django applications from Cross-Site Request 
    # Forgery (CSRF) attacks by verifying that each request includes a valid CSRF token. It checks for the 
    # presence and validity of the CSRF token in every request to prevent malicious requests from being 
    # processed.
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware", # enables the display of messages to users, 
    # such as success or error messages, after a request has been processed. It stores messages in the 
    # session and makes them available to templates for display.
    "django.middleware.clickjacking.XFrameOptionsMiddleware",#protects Django applications from clickjacking 
    # attacks by setting the X-Frame-Options header, which prevents malicious sites from framing your 
    # application's pages.
]

ROOT_URLCONF = "stationary.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            os.path.join(BASE_DIR, "build"),
            ],
        "APP_DIRS": True,  # This allows Django to look for templates in each app's "templates" directory.
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "stationary.wsgi.application"

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": os.path.join(BASE_DIR, "database.sqlite3"),
    }
}


AUTH_PASSWORD_VALIDATORS = [
    # {
    #    'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    # },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
        "OPTIONS": {
            "min_length": 9,
        },
    }  # ,
    # {
    #    'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    # },
    # {
    #    'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    # },
]

AUTH_USER_MODEL = 'adminpanel.User'


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True

CRISPY_TEMPLATE_PACK = "tailwind"

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "/static/"  # the base URL at which the static files will be accessible from the web browser
# The actual location of the static file on your server is determined by the STATICFILES_DIRS and STATIC_ROOT settings
STATICFILES_DIRS = [# STATICFILES_DIRS is for development. STATIC_ROOT is used for deployment.
    os.path.join(BASE_DIR, "build", "static"),
]
# The STATICFILES_DIRS setting in Django is used to specify additional directories from which to gather static files
# during the collectstatic management command.

# Static file serving.
# https://whitenoise.readthedocs.io/en/stable/django.html#add-compression-and-caching-support
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"
# a storage engine provided by the WhiteNoise library, which is commonly used for serving static files in Django applications
# deployed on platforms like Heroku. By setting STORAGE to 'whitenoise.storage.CompressedManifestStaticFilesStorage', you
# enable WhiteNoise to handle the collection, compression, and efficient serving of your static files in a production environment.

# Static folder for Heroku
STATIC_ROOT = (
    os.path.join(BASE_DIR, "staticfiles")
)  # where to store ctatic files for local production
STATIC_URL = "/static/"
# This sets the location where Django will collect and store static files when you run the collectstatic management command.

MEDIA_URL = "media/"  # the base URL at which the media files will be accessible from the web browser
MEDIA_ROOT = (
    os.path.join(BASE_DIR, "media")
)

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Redirect to home page after login
LOGIN_REDIRECT_URL = "/"

# LOGIN_URL = "/accounts/login/"

# Use email as the primary identifier for authentication
# ACCOUNT_AUTHENTICATION_METHOD = "email"
# ACCOUNT_EMAIL_REQUIRED = True
# ACCOUNT_UNIQUE_EMAIL = True
# ACCOUNT_EMAIL_VERIFICATION = "mandatory"
# EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"

CORS_ORIGIN_WHITELIST = [
    'http://localhost:3000',  # The default port for create-react-app
    'http://localhost:8000'
]
CORS_ALLOWED_ALL_ORIGINS = True
CORS_ALLOWED_ORIGINS = [
    'http://localhost:3000',
    'http://localhost:8000'
]

GRAPHENE = {
    'SCHEMA': 'stationary.schema.schema',
    'MIDDLEWARE': [
        'adminpanel.middleware.graphql_middleware.JwtTokenMiddleware'
        # default middleware was "graphql_jwt.middleware.JSONWebTokenMiddleware" but that is imported in 
        # graphql_middleware.py and some additions made to default middleware.
    ],
    "ATOMIC_MUTATIONS": True,
}